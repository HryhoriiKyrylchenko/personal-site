// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonalSite.Infrastructure.Persistence;

#nullable disable

namespace PersonalSite.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PersonalSite.Domain.Entities.Analytics.AnalyticsEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalDataJson")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PageSlug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Referrer")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventType");

                    b.HasIndex("PageSlug");

                    b.ToTable("AnalyticsEvents");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Blog.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsPublished");

                    b.HasIndex("PublishedAt");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Blog.BlogPostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BlogPostTags");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Blog.PostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlogPostTagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostTagId");

                    b.HasIndex("BlogPostId", "BlogPostTagId")
                        .IsUnique();

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Common.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("Source");

                    b.HasIndex("Timestamp");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Contact.ContactMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email");

                    b.HasIndex("IsRead");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Pages.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DemoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RepoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.LearningSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LearningStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("SkillId");

                    b.ToTable("LearningSkills");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.ProjectSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SkillId");

                    b.HasIndex("ProjectId", "SkillId")
                        .IsUnique();

                    b.ToTable("ProjectSkills");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.SkillCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("SkillCategories");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<short>("Proficiency")
                        .HasColumnType("smallint");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasMaxLength(2)
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translations");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.BlogPostTranslation", b =>
                {
                    b.HasBaseType("PersonalSite.Domain.Entities.Translations.Translation");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OgImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasIndex("BlogPostId");

                    b.ToTable("BlogPostTranslations");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.PageTranslation", b =>
                {
                    b.HasBaseType("PersonalSite.Domain.Entities.Translations.Translation");

                    b.Property<Dictionary<string, string>>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OgImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasIndex("PageId");

                    b.ToTable("PageTranslations");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.ProjectTranslation", b =>
                {
                    b.HasBaseType("PersonalSite.Domain.Entities.Translations.Translation");

                    b.Property<Dictionary<string, string>>("DescriptionSections")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OgImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTranslations");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.SkillCategoryTranslation", b =>
                {
                    b.HasBaseType("PersonalSite.Domain.Entities.Translations.Translation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SkillCategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillCategoryTranslations");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.SkillTranslation", b =>
                {
                    b.HasBaseType("PersonalSite.Domain.Entities.Translations.Translation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasIndex("Name");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillTranslations");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Blog.PostTag", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Blog.BlogPost", "BlogPost")
                        .WithMany("PostTags")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalSite.Domain.Entities.Blog.BlogPostTag", "BlogPostTag")
                        .WithMany("PostTags")
                        .HasForeignKey("BlogPostTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");

                    b.Navigation("BlogPostTag");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.LearningSkill", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Skills.Skill", "Skill")
                        .WithMany("LearningSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.ProjectSkill", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Projects.Project", "Project")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalSite.Domain.Entities.Skills.Skill", "Skill")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.Skill", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Skills.SkillCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.UserSkill", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Skills.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.Translation", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Translations.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.BlogPostTranslation", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Blog.BlogPost", "BlogPost")
                        .WithMany("Translations")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalSite.Domain.Entities.Translations.Translation", null)
                        .WithOne()
                        .HasForeignKey("PersonalSite.Domain.Entities.Translations.BlogPostTranslation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.PageTranslation", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Translations.Translation", null)
                        .WithOne()
                        .HasForeignKey("PersonalSite.Domain.Entities.Translations.PageTranslation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalSite.Domain.Entities.Pages.Page", "Page")
                        .WithMany("Translations")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.ProjectTranslation", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Translations.Translation", null)
                        .WithOne()
                        .HasForeignKey("PersonalSite.Domain.Entities.Translations.ProjectTranslation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalSite.Domain.Entities.Projects.Project", "Project")
                        .WithMany("Translations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.SkillCategoryTranslation", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Translations.Translation", null)
                        .WithOne()
                        .HasForeignKey("PersonalSite.Domain.Entities.Translations.SkillCategoryTranslation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalSite.Domain.Entities.Skills.SkillCategory", "SkillCategory")
                        .WithMany("Translations")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Translations.SkillTranslation", b =>
                {
                    b.HasOne("PersonalSite.Domain.Entities.Translations.Translation", null)
                        .WithOne()
                        .HasForeignKey("PersonalSite.Domain.Entities.Translations.SkillTranslation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalSite.Domain.Entities.Skills.Skill", "Skill")
                        .WithMany("Translations")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Blog.BlogPost", b =>
                {
                    b.Navigation("PostTags");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Blog.BlogPostTag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Pages.Page", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Projects.Project", b =>
                {
                    b.Navigation("ProjectSkills");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.Skill", b =>
                {
                    b.Navigation("LearningSkills");

                    b.Navigation("ProjectSkills");

                    b.Navigation("Translations");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("PersonalSite.Domain.Entities.Skills.SkillCategory", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
